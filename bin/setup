#!/bin/sh

# Welcome to the Alessio Rocco laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
# Thanks to https://github.com/thoughtbot/laptop

fancy_echo() {
  local fmt="$1"
  shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

update_shell() {
  local shell_path
  shell_path="$(command -v fish)"

  fancy_echo "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells >/dev/null 2>&1; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    fancy_echo "Installing $name asdf plugin ..."
    asdf plugin-add "$name" "$url"
  fi
}

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    fancy_echo "Installing latest $language ..."
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

# Add a failed message if setup fails.
# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "\nSetup failed!\n\n" >&2; exit $ret' EXIT

# Exit immediately if a command exits with a non-zero status.
set -e

fancy_echo 'Applying MacOS configurations ...'

# Map 'caps lock' key to 'control'
hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x700000039,"HIDKeyboardModifierMappingDst":0x7000000E0}]}' >/dev/null

# Dock configurations

## Show only active apps.
defaults write com.apple.dock static-only -bool TRUE

## Automatically hide and show the Dock.
defaults write com.apple.dock autohide -bool TRUE

## Set Dock position to the left of the screen.
defaults write com.apple.dock orientation right

## Restart the Dock to apply the changes
killall Dock

## Automatically hide and show the Menubar.
defaults write NSGlobalDomain _HIHideMenuBar -bool TRUE

## Add Spectacle app to login items
osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Spectacle.app", hidden:true}'

# Disable the Apple press and hold for VSCode.
#
# https://github.com/VSCodeVim/Vim#mac
defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false

# Install the Command Line Tools
if ! command -v xcode-select -p >/dev/null; then
  fancy_echo "Installing the Command Line Tools ..."

  xcode-select --install
fi

# Install Homebrew if the brew command is not found
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
fi

# Upgrade Homebrew and install or upgrade formulae
fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "heroku/brew"
tap "shopify/shopify"

# Tools and libraries
brew "asdf"
brew "awscli"
brew "bat"
brew "fd"
brew "fish"
brew "fzf"
brew "geckodriver"
brew "gh"
brew "git"
brew "git-delta"
brew "heroku"
brew "libpq"
brew "ltex-ls"
brew "neovim"
brew "rcm"
brew "ripgrep"
brew "tmux"
brew "universal-ctags"
brew "wget"
brew "zoxide"
brew "shopify-cli"

# Apps
cask "1password"
cask "alfred"
cask "chromedriver"
cask "cleanmymac"
cask "docker"
cask "firefox"
cask "gemini"
cask "google-chrome"
cask "insomnia"
cask "wezterm"
cask "ngrok"
cask "spectacle"
cask "spotify"

# Image manipulation
brew "imagemagick"

# Mac App Store command line interface
brew "mas"

# Programming language prerequisites and package managers
brew "gpg"
brew "yarn", args: ["ignore-dependencies"]

EOF

# Install Apps from Apple Store
fancy_echo "Installing Apps from Apple Store ..."
mas install 310633997 # WhatsApp Messenger
mas install 568494494 # Pocket
mas install 585829637 # Todoist: To-Do List & Tasks
mas install 747648890 # Telegram
mas install 803453959 # Slack

# Change the shell to fish if needed
case "$SHELL" in
*/fish)
  if [ "$(command -v fish)" != '/usr/local/bin/fish' ]; then
    update_shell
  fi
  ;;
*)
  update_shell
  ;;
esac

# Install asdf plugins
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

# Install languages
install_asdf_language "ruby"
install_asdf_language "nodejs"

# Create code folder
CODE_DIR="$HOME/code"

if [ ! -d "$CODE_DIR" ]; then
  fancy_echo "Creating code folder ..."
  mkdir "$CODE_DIR"
fi

# Clone the repo if not present then install dotfiles with rcup
DOTFILES_DIR="$HOME/dotfiles"

fancy_echo "Installing dotfiles ..."
if [ ! -d "$DOTFILES_DIR" ]; then
  git clone https://github.com/AlessioRocco/dotfiles-new "$DOTFILES_DIR"
fi
rcup -K -d "$DOTFILES_DIR" rcrc
rcup

# Set bundle number of cores
fancy_echo "Setting bundle number of cores ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Run clean script
clean

fancy_echo 'Setup completed!'
