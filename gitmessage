

# How to Write a Git Commit Message
# Based on: https://cbea.ms/git-commit/
#
# Seven Rules for a Great Commit Message:
#
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# The subject line should complete: "If applied, this commit will..."
#
# Good examples:
#
# --- Example 1: Simple fix ---
# Fix typo in introduction to user guide
#
# --- Example 2: Refactor with explanation ---
# Refactor authentication logic for clarity
#
# Extract authentication checks into a separate module to improve code
# readability and maintainability. This change does not affect user
# experience but simplifies future enhancements to the login process.
#
# --- Example 3: New feature ---
# Add support for bulk user import
#
# Implement functionality to allow administrators to import users in
# bulk from a CSV file. This streamlines onboarding for large
# organizations and reduces manual entry errors.
#
# --- Example 4: System update ---
# Update API endpoints for v2 compatibility
#
# Modify existing endpoints to support API v2, ensuring backward
# compatibility with v1 clients. This prepares the system for upcoming
# feature releases and minimizes migration risks.
#
# Remember:
# - Use imperative mood: "Fix bug" not "Fixed bug" or "Fixes bug"
# - Focus on what and why, not how
# - Explain the reasoning, user/business impact, and context
# - Mention migration, compatibility, or technical debt if relevant
# - Keep the subject line concise and descriptive
# - Use the body to provide necessary context and explanation
